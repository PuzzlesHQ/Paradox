import org.hjson.HjsonDsf
import org.hjson.HjsonOptions
import org.hjson.JsonArray
import org.hjson.JsonObject
import org.hjson.Stringify

buildscript {
    repositories {
        flatDir {
            // to use local builds
            dirs 'lib'
        }

        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url "https://maven.google.com/" }
        maven { url "https://libraries.minecraft.net" }
        maven {
            name "neoforged"
            url "https://maven.neoforged.net/release"
        }
    }

    dependencies {
        classpath "com.github.puzzle:puzzleDecompGradle:1.0-SNAPSHOT"
        classpath "org.hjson:hjson:$hjsonVersion"
    }
}
plugins {
    id 'application'
    id "com.gradleup.shadow" version "8.3.6"
}
group = 'com.github.puzzle'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url "https://maven.google.com/" }
    maven { url "https://libraries.minecraft.net" }
    maven {
        name "neoforged"
        url "https://maven.neoforged.net/release"
    }
}

apply plugin: "java"
apply plugin: "puzzle-crcp-gradle"

dependencies {
    //comment out if using server
//    implementation "com.badlogicgames.gdx-controllers:gdx-controllers-core:$gdxControllersVersion"
//    implementation "com.badlogicgames.gdx-controllers:gdx-controllers-desktop:$gdxControllersVersion"
//
//    implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
//
//    implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion"
//    implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"

    ///////

    shadow"com.google.guava:guava:$guavaVersion"
//            {
//        exclude (group: "com.google.common" , module: "google-collect")
//    }
    shadow "com.google.code.gson:gson:$gsonVersion"
    implementation "com.badlogicgames.gdx:gdx:$gdxVersion"
    implementation "org.lz4:lz4-java:1.8.0"
    implementation "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
    implementation "com.github.FinalForEach:Cosmic-Reach-Save-Library:$saveLib"



    implementation "com.github.Hangman:TuningFork:$tuningFork"
    implementation "io.netty:netty-all:4.1.24.Final"

    shadow("org.reflections:reflections:$reflectionsVersion")
    shadow("com.mojang:brigadier:1.0.18")
    shadow 'org.apache.commons:commons-configuration2:2.11.0'
    shadow 'org.apache.commons:commons-lang3:3.14.0'
    shadow 'org.apache.commons:commons-text:1.12.0'
    shadow 'commons-beanutils:commons-beanutils:1.9.4'
    shadow 'commons-logging:commons-logging:1.3.2'
    shadow 'commons-io:commons-io:2.15.1'
    shadow"net.neoforged:bus:8.0.2"
    shadow"org.apache.logging.log4j:log4j-api:$log4jVersion"
    shadow"org.apache.logging.log4j:log4j-core:$log4jVersion"
    shadow"org.apache.logging.log4j:log4j-slf4j2-impl:$log4jVersion"
    shadow"org.slf4j:slf4j-api:2.0.17"
    shadow'org.jline:jline:3.25.0'
    shadow("org.ow2.asm:asm:9.8")
    shadow'org.fusesource.jansi:jansi:2.2.0'
    shadow"org.hjson:hjson:$hjsonVersion"
    shadow('org.jetbrains:annotations:24.0.0')
    shadow"net.sf.jopt-simple:jopt-simple:$joptSimpleVersion"
//    implementation project(":api") //TODO: fix

}

tasks.named('runShadow', JavaExec) {
}

application {
    mainClass = 'com.github.puzzle.paradox.loader.launch.Piece'
    // Optionally, you can add default JVM arguments to the start scripts like this:
    applicationDefaultJvmArgs = ['--add-opens=java.base/java.lang=ALL-UNNAMED']
}
javadoc {
}
tasks.jar {
    dependsOn("dumpdeps")
}


tasks.register("copyToLib", Copy) {
    from ShadowJar
    from configurations.implementation
    into("$buildDir/output/lib")
}
tasks.register("dumpdeps"){


    JsonObject base = new JsonObject();
    JsonArray deps = new JsonArray()
//    configurations.each { println it.name }

    configurations.shadow.allDependencies.each {dependency ->

        for (ArtifactRepository repository : rootProject.repositories.asList()) {
            try {
                def url = repository.properties.get('url')
                def urlString = url.toString()
                if(urlString.startsWith("file:")){
                    continue
                }
                if (url.toString().endsWith("/")) {
                    urlString = url.toString()
                } else {
                    urlString = url.toString() + "/"
                }
                if(dependency.name == "TuningFork" ||
                        dependency.name == "netty-all" ||
                        dependency.name == "gdx"||
                        dependency.name == "gdx-backend-headless")
                    continue;

                def jarUrl = String.format("%s%s/%s/%s/%s-%s.jar", urlString,
                        dependency.group.replace('.', '/'), dependency.name, dependency.version,
                        dependency.name, dependency.version)


                def jarfile = new URL(jarUrl)
//                println(jarUrl)
                def inStreamJar = jarfile.openStream();
                if (inStreamJar != null) {
                    String name = String.format("%s:%s:%s", dependency.group, dependency.name, dependency.version)
//                        + " -> " + jarUrl)
                    var obj = new JsonObject().add("url", jarUrl);
                    obj.add("size", inStreamJar.getBytes().size())
                    obj.add("name", name)
                    deps.add(obj)
                    return
                }
            } catch (Exception ignored) {
            }
        }

    }
    var p =  project(":launcher").sourceSets["main"].resources.srcDirs[0].toString();
    File file = new File("$p/dependencies.json")

    base.add("dependencies", deps)
    base.add("cr-version", crVersion);
    file.write(base.toString(Stringify.FORMATTED));
//    println(base.toString(Stringify.FORMATTED))

 }
sourceSets {
    main {
        java {
            srcDirs "src/main/java"
            srcDirs "cosmicReach/src/main/java"
        }
        resources {
            srcDirs "src/main/resources"
            srcDirs "cosmicReach/src/main/resources"
        }
    }

}




jar {
    manifest {
        attributes("Implementation-Title": project.name,
                "Implementation-Version": paradoxVersion,
                "Main-Class": "com.github.puzzle.paradox.loader.launch.Piece",
                "Multi-Release": true);
    }
}

tasks.runShadow {

}
processResources() {

//    "src/main/java/com/github/puzzle/core/PuzzlePL.java"

    duplicatesStrategy = 'EXCLUDE'
}

