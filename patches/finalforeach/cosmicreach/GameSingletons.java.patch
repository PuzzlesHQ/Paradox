--- a/finalforeach/cosmicreach/GameSingletons.java
+++ b/finalforeach/cosmicreach/GameSingletons.java
@@ -6,6 +_,7 @@
 import com.badlogic.gdx.math.collision.BoundingBox;
 import com.badlogic.gdx.utils.Array;
 import com.badlogic.gdx.utils.ObjectMap;
+import com.github.puzzle.paradox.core.PuzzlePL;
 import finalforeach.cosmicreach.accounts.Account;
 import finalforeach.cosmicreach.blockentities.BlockEntity;
 import finalforeach.cosmicreach.blockentities.BlockEntityCreator;
@@ -43,10 +_,10 @@
 import finalforeach.cosmicreach.util.containers.CRObjectMap;
 import finalforeach.cosmicreach.util.containers.DynamicArray;
 import finalforeach.cosmicreach.util.containers.DynamicByteArray;
-import finalforeach.cosmicreach.util.logging.Logger;
 import finalforeach.cosmicreach.world.IZoneLoader;
 import finalforeach.cosmicreach.world.World;
 import finalforeach.cosmicreach.world.Zone;
+
 import java.util.HashMap;
 import java.util.Objects;
 import java.util.WeakHashMap;
@@ -56,7 +_,7 @@
 public class GameSingletons {
 	public static World world;
 	private static ObjectMap<String, Player> uniqueIdsToPlayers = new ObjectMap<>();
-	private static WeakHashMap<Player, String> playersToUniqueIds = new WeakHashMap<>();
+	public static WeakHashMap<Player, String> playersToUniqueIds = new WeakHashMap<>();
 	private static WeakHashMap<Player, Account> playersToAccounts = new WeakHashMap<>();
 	public static boolean isAllFlaggedForRemeshing;
 	public static IZoneRenderer zoneRenderer;
@@ -74,7 +_,7 @@
 	public static IClientSingletons clientSingletons;
 
 	public static void create() {
-		Logger.info("Starting Cosmic Reach " + (isClient ? "Client" : "Server") + " version " + RuntimeInfo.version);
+		org.slf4j.LoggerFactory.getLogger("Cosmic Reach").info("Starting Cosmic Reach " + (isClient ? "Client" : "Server") + " version " + RuntimeInfo.version + " | Paradox " + PuzzlePL.VERSION);
 		DynamicArrays.instantiator = new IDynamicArrayInstantiator() {
 			@Override
 			public <E> IDynamicArray<E> create(Class<E> clazz) {
@@ -237,6 +_,7 @@
 			uniqueIdsToPlayers.put(account.getUniqueId(), player);
 			playersToUniqueIds.put(player, account.getUniqueId());
 			playersToAccounts.put(player, account);
+			com.github.puzzle.paradox.api.Paradox.getInstance().addPlayer(player);
 		}
 	}
 
@@ -254,12 +_,14 @@
 					zone.getPlayers().clear();
 				}
 			}
+			com.github.puzzle.paradox.api.Paradox.getInstance().removeAllPlayers();
 		}
 	}
 
 	public static void unregisterPlayer(Player player) {
 		synchronized (getPlayerLock()) {
 			String s = playersToUniqueIds.get(player);
+			com.github.puzzle.paradox.api.Paradox.getInstance().removePlayer(player);
 			playersToUniqueIds.remove(player);
 			uniqueIdsToPlayers.remove(s);
 			Account account = playersToAccounts.remove(player);
