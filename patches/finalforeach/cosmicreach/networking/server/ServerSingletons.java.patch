--- a/finalforeach/cosmicreach/networking/server/ServerSingletons.java
+++ b/finalforeach/cosmicreach/networking/server/ServerSingletons.java
@@ -2,10 +_,7 @@
 
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.utils.ObjectMap;
-import finalforeach.cosmicreach.BlockEntityScreenInfo;
-import finalforeach.cosmicreach.EntityPathfinder;
-import finalforeach.cosmicreach.Threads;
-import finalforeach.cosmicreach.TickRunner;
+import finalforeach.cosmicreach.*;
 import finalforeach.cosmicreach.accounts.Account;
 import finalforeach.cosmicreach.blocks.BlockState;
 import finalforeach.cosmicreach.blocks.blockentities.BlockEntity;
@@ -44,6 +_,8 @@
 
 public class ServerSingletons {
 	public static NettyServer SERVER;
+
+  	public static com.github.puzzle.paradox.core.PuzzlePL puzzle;
 	private static ObjectMap<NetworkIdentity, Account> netIdsToAccounts = new ObjectMap<>();
 	private static ObjectMap<Account, NetworkIdentity> accountsToNetIds = new ObjectMap<>();
 	private static ObjectMap<String, Account> uniqueIdsToAccounts = new ObjectMap<>();
@@ -153,6 +_,7 @@
 			World world = GameSingletons.world;
 
 			for (Zone zone : world.getZones()) {
+
 				zone.update(deltaTime);
 			}
 
@@ -164,6 +_,7 @@
 		});
 		registerCustomScreenInfoOpeners();
 		registerBlockEntityOpeners();
+		puzzle = new com.github.puzzle.paradox.core.PuzzlePL();
 		GameSingletons.postCreate();
 	}
 
@@ -205,11 +_,10 @@
 	public static Account getAccount(NetworkIdentity identity) {
 		return identity == null ? null : netIdsToAccounts.get(identity);
 	}
-
 	public static Player getPlayer(NetworkIdentity identity) {
 		Account account = getAccount(identity);
 		return account == null ? null : GameSingletonPlayers.getPlayerFromUniqueId(account.getUniqueId());
-	}
+    }
 
 	public static ServerIdentity getConnection(Player player) {
 		Account account = GameSingletonPlayers.getAccountFromPlayer(player);
@@ -219,4 +_,9 @@
 	public static Account getAccountByUniqueId(String playerUniqueId) {
 		return uniqueIdsToAccounts.get(playerUniqueId);
 	}
+
+	public static ServerIdentity getIdentityByAccount(Account account) {
+		return (ServerIdentity)accountsToNetIds.get(account);
+	}
+
 }
