--- a/finalforeach/cosmicreach/networking/server/ServerSingletons.java
+++ b/finalforeach/cosmicreach/networking/server/ServerSingletons.java
@@ -2,11 +_,7 @@
 
 import com.badlogic.gdx.math.Vector3;
 import com.badlogic.gdx.utils.ObjectMap;
-import finalforeach.cosmicreach.BlockEntityScreenInfo;
-import finalforeach.cosmicreach.GameSingletons;
-import finalforeach.cosmicreach.Threads;
-import finalforeach.cosmicreach.TickRunner;
-import finalforeach.cosmicreach.ZoneLoaders;
+import finalforeach.cosmicreach.*;
 import finalforeach.cosmicreach.accounts.Account;
 import finalforeach.cosmicreach.blockentities.BlockEntity;
 import finalforeach.cosmicreach.blockentities.IBlockEntityWithContainer;
@@ -40,6 +_,8 @@
 
 public class ServerSingletons {
 	public static NettyServer SERVER;
+
+  	public static com.github.puzzle.paradox.core.PuzzlePL puzzle;
 	private static ObjectMap<NetworkIdentity, Account> netIdsToAccounts = new ObjectMap<>();
 	private static ObjectMap<Account, NetworkIdentity> accountsToNetIds = new ObjectMap<>();
 	private static ObjectMap<String, Account> uniqueIdsToAccounts = new ObjectMap<>();
@@ -149,6 +_,7 @@
 			World world = GameSingletons.world;
 
 			for (Zone zone : world.getZones()) {
+
 				zone.update(deltaTime);
 			}
 
@@ -158,6 +_,7 @@
 			}
 		});
 		registerBlockEntityOpeners();
+		puzzle = new com.github.puzzle.paradox.core.PuzzlePL();
 		GameSingletons.postCreate();
 	}
 
@@ -193,7 +_,7 @@
 	public static Player getPlayer(NetworkIdentity identity) {
 		Account account = getAccount(identity);
 		return account == null ? null : GameSingletons.getPlayerFromUniqueId(account.getUniqueId());
-	}
+    }
 
 	public static ServerIdentity getConnection(Player player) {
 		Account account = GameSingletons.getAccountFromPlayer(player);
@@ -203,4 +_,9 @@
 	public static Account getAccountByUniqueId(String playerUniqueId) {
 		return uniqueIdsToAccounts.get(playerUniqueId);
 	}
+
+	public static ServerIdentity getIdentityByAccount(Account account) {
+		return (ServerIdentity)accountsToNetIds.get(account);
+	}
+
 }
